import sqlite3
import requests, os
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import CallbackQuery, Message
from aiogram.utils import executor
from telethon.tl.functions.account import UpdateUsernameRequest
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import asyncio, time
import config
from pyrogram import Client
from telethon.sync import TelegramClient
from requests_html import HTMLSession
from time import sleep
from func import *
from rich.console import Console
from telethon.sessions import StringSession
from telethon.tl.functions.users import GetFullUserRequest

console = Console()

def logo():
	console.print("[blink blue]      _             __         ___       __[/]", justify="center")
	console.print("[blink blue]  ____(_)______ ____/ /__ _____/ _ )___  / /_[/]", justify="center")
	console.print("[blink yellow] / __/ / __/ _ `/ _  / _ `/___/ _  / _ \/ __/[/]", justify="center")
	console.print("[blink yellow]\__/_/\__/\_,_/\_,_/\_,_/   /____/\___/\__/[/]", justify="center")
	console.print("[blink blue]----------Telegram-Bot-Cicada3301-----------[/]", justify="center")
	time.sleep(2)


loop = asyncio.get_event_loop()
tk="5485562654:AAFP6jU-_JsPrrgZRctLpY3wkXdJbmMFQTs"
bot = Bot(token=tk, loop=loop)
dp = Dispatcher(bot)
MethodGetMe = (f'''https://api.telegram.org/bot{tk}/GetMe''')
response = requests.post(MethodGetMe)
tttm = response.json()
tk = tttm['ok']
if tk == True:
	id_us = (tttm['result']['id'])
	first_name = (tttm['result']['first_name'])
	username = (tttm['result']['username'])
	os.system('cls')
	logo()

	console.print(f"""[bold blue italic]
				---------------------------------
				üÜî Bot id: {id_us}
				---------------------------------
				üë§ –ò–º—è –ë–æ—Ç–∞: {first_name}
				---------------------------------
				üó£ username: {username}
				---------------------------------
				üåê https://t.me/{username}
				---------------------------------
				******* Suport: @Satanasat ******[/]
	""", justify="center")


async def get_users():
	while True:
		await asyncio.sleep(1)
		session = HTMLSession()
		for x in get_m():
			x = x[0]
			r = session.get(f'https://t.me/{x}')
			if '<i class="tgme_icon_user"></i>' in r.text:
				for s in os.listdir("sessions"):
					print(s)
					with open(f"sessions/{s}", "r") as f:
						ses = f.read()
					
						client = TelegramClient(StringSession(ses), config.api_id, config.api_hash)
						await client.connect()
						p = await client.get_me()
						print(p.username)
					try:
						sleep(60*10)
						dd = await client(UpdateUsernameRequest(username=f"{x}"))
						await detele_monitoring(x)
						for i in config.admins:
							await bot.send_message(i, f"<b>Username {ydal} –ü–æ–ª—É—á–µ–Ω</b>", parse_mode="HTML")
						break
					except:
						pass
			else:
				print('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', x)
				pass

@dp.message_handler(text="cicada")
async def cicada(m: types.Message):
	keyboard = InlineKeyboardMarkup()
	xx = get_m()
	for file in xx:
		keyboard.add(InlineKeyboardButton(text=file[0], callback_data=file[0]))
	await m.answer("<b>C–ª–µ–∂–∫–∞ –ó–∞ –ù–∏–º–∏</b>", parse_mode="HTML",  reply_markup=keyboard)
@dp.callback_query_handler(lambda c: c.data)
async def poc_callback_but(c:CallbackQuery):
	ydal = c.data
	detele_monitoring(ydal)
	for i in config.admins:
		await bot.send_message(i, f"<b>Username {ydal} –£–¥–∞–ª–µ–Ω –°–æ –°–ª–µ–∂–∫–∏</b>", parse_mode="HTML")


@dp.message_handler(commands=['start'])
async def process_start_command(m: types.Message):
	if m.chat.id in config.admins:
		text = "üíæ <b>–°—Ç–∏–ª–µ—Ä –ª–æ–≥–∏–Ω–æ–≤ –≤ —Ç–µ–ª–µ–≥–∞–º:</b>\n\n"\
				f"üëÄ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è Username: <b>{len(get_m())}—à—Ç.</b>\n"
		button = KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å Username')
		button1 = KeyboardButton('üè∞ –ì–ª–∞–≤–Ω–∞—è')
		keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
		keyboard.add(button)
		keyboard.add(button1)
		await bot.send_message(m.chat.id, text,reply_markup=keyboard, parse_mode="HTML")
	else:
		await bot.send_message(m.chat.id, "<b>‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.</b>", parse_mode="HTML")

@dp.message_handler()
async def echo_message(m: types.Message):
	if m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å Username':
		await bot.send_message(m.chat.id, 'üëæ <b>–í–≤–µ–¥–∏—Ç–µ Username –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–æ–≤—ã–π Username. (–° @)</b>', parse_mode="HTML")
	elif m.text == 'üè∞ –ì–ª–∞–≤–Ω–∞—è':
		await process_start_command(m)
	elif "@" in m.text:
		for _ in m.text.split('\n'):
				if "@" in _:
					add_m(_.split("@")[1])
					await bot.send_message(m.chat.id, f'‚úÖ <b>Username "{_}" –±—ã–ª —É—Å–ø–µ—à–Ω–æ –î–æ–±–∞–≤–ª–µ–Ω –î–ª—è –°–ª–µ–∂–∫–∏.</b>', parse_mode="HTML")
				else:
					pass
				

if __name__ == '__main__':
	loop.create_task(get_users())
	#dp.loop.create_task(get_channels())
	executor.start_polling(dp)
